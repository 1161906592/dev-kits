export const XXXModal = defineComponent({
  props: {
    ...createModalProps(),
  },
  setup(props) {
    const formInstRef = ref<FormInst | null>(null)
    
    // 保存数据
    const {
      loadingRef: submitLoadingRef,
      submit: { modelRef, handleSubmit },
    } = useSubmitLogic(
      async (model) => {
        <%- include( `${process.cwd()}/.swagger/converter.ejs`, { fields: inputFields, isForm: true }) %>
        const res = await xxxSave({
          // model,
        })

        return res.content
      },
      {
        onSuccess() {
          perferMessage.success('操作成功')
          props.onUpdate?.()
          props['onUpdate:show']?.(false)
        },
        model: () => [] as PartialNull<BatchFormModel>[],
        validate: async () => {
          try {
            await formInstRef.value?.validate()
          } catch (e) {
            showErrorMessage('请完善必填项')
            throw e
          }
        },
        manual: true,
      }
    )
    
    useModalLogic({
      props,
      restoreValidation: () => formInstRef.value?.restoreValidation(),
    })

    let key = 0
    const getKey = () => (key += 1)

    // 表格数据
    const { loadingRef } = useRequestLogic(
      async () => {
        const res = await <%- name %>({
          //
        })

         return res.content
      },
      {
        ready: () => props.show,
        onSuccess(data) {
          <%- include( `${process.cwd()}/.swagger/converter.ejs`, { fields: inputFields }) %>

          modelRef.value =
            data?.map((item) => ({
              _key: getKey(),
              ...pickConvert(item, converter, null),
            })) || []
        },
      }
    )

    const tableRef = ref<DataTableInst | null>(null)

    // 增加
    const handleAdd = async () => {
      modelRef.value.push({
        _key: getKey(),
        <% inputFields.forEach(function(item){ %>
          <%- item.key %>: null, // <%- item.title %>
        <% }) %>
      })

      await nextTick()

      tableRef.value?.scrollTo({
        left: 0,
        top: 60 * (modelRef.value?.length || 0),
        behavior: 'smooth',
      })
    }

    // 删除
    const handleDelete = (index: number) => modelRef.value?.splice(index, 1)

    <%- include( `${process.cwd()}/.swagger/formFieldsHelper.ejs`, { fields: inputFields }) %>

    const columns: DataTableColumns<PartialNull<BatchFormModel>> = [
      <% inputFields.filter(item => item.key !== "id").forEach(function(item) { %>
        {
          key: '<%- item.key %>',
          title: '<%- item.title %>',
          <% if (outputFields.find(d => d.key === item.key)) { %>
          render: (row, index) => {
            return (
              <NFormItem
                path={`${index}.<%- item.key %>`}
                <% if (outputFields.find(d => d.key === item.key).required) { %>
                rule={<%- include( `${process.cwd()}/.swagger/formRuleItem.ejs`, { item }) %>}
                <% } %>
              >
                <%- include( `${process.cwd()}/.swagger/formItem.ejs`, { item, model: 'row', booleanType: "NSwitch" }) %>
              </NFormItem>
            )
          },
          <% } %>
        },
      <% }) %>
      {
        key: 'action',
        title: '操作',
        render: (_, index) => (
          <NButton
            text
            v-slots={{
              icon: () => (
                <NIcon size={18}>
                  <Delete24Regular />
                </NIcon>
              ),
            }}
            onClick={() => handleDelete(index)}
          />
        ),
        width: 60,
        align: 'center',
      },
    ]

    const rowKey = (row: BatchFormModel) => row._key

    return () => (
      <NModal
        preset="card"
        showIcon={false}
        maskClosable={false}
        title="判定标准"
        show={props.show}
        onUpdate:show={props['onUpdate:show']}
        style={{ width: '900px' }}
        size="small"
        autoFocus={false}
        {...presetStyleModal}
        v-slots={{
          footer: () => (
            <NSpace size="large" justify="end">
              <NButton onClick={() => props['onUpdate:show']?.(false)}>取消</NButton>
              <NButton type="primary" onClick={handleSubmit} loading={loadingRef.value}>
                确定
              </NButton>
            </NSpace>
          ),
        }}
      >
        <div class="un-p-12px">
          <NForm model={modelRef.value} ref={formInstRef} showFeedback={false} labelPlacement="left">
            <NDataTable
              size="small"
              columns={columns}
              data={modelRef.value}
              maxHeight="calc(100vh - 360px)"
              ref={tableRef}
              rowKey={rowKey}
              loading={loadingRef.value}
            />
          </NForm>
          <NButton
            block
            v-slots={{
              icon: () => (
                <NIcon>
                  <Add />
                </NIcon>
              ),
            }}
            class="un-mt-12px"
            onClick={handleAdd}
          >
            新增
          </NButton>
        </div>
      </NModal>
    )
  }
})
/**
 * 表单数据类型
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
<%- include( `${process.cwd()}/.swagger/formModel.ejs`, {
  typeName: inputType,
  exportName: 'BatchFormModel',
  fields: inputFields,
  appendFields: [{ key: '_key', type: 'number', requried: true }],
}) %>